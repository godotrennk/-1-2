echo "# -1-2" >> README.md
git init
git add README.md
git commit -m "первый коммит"
git branch -M main
git remote add origin https://github.com/godotrennk/-1-2.git
git push -u origin main
Чтобы получать обновления о последней поддержке определенного продукта, подпишитесь на то, как вы хотите получать обновления.


Windows IT Pro/RE
2012
№ 09
Поиск данных в реестре средствами PowerShell
29.10.2012 Билл Стюарт 24211 прочтений
Поиск информации в реестре уже перестал быть утомительной процедурой, так хорошо знакомой нам по прошлому опыту. Пожалуй, миновали времена, когда нам приходилось в ходе одного сеанса работы пару сотен раз нажимать клавишу F3. Теперь, когда вам нужно будет найти что-нибудь в реестре, просто откройте окно командной строки PowerShell и запустите сценарий Search-Registry.ps1

Билл Стюарт (bill.stewart@frenchmortuary.com) – системный и сетевой администратор компании French Mortuary, Нью-Мехико

Все, кому доводилось хоть немного заниматься управлением системами Windows, знают, что такое реестр. Первоначально реестр был включен в операционную систему как средство для хранения сведений о типах файлов. Но с выходом в свет версий Windows NT 3.1 и Windows 95 он превратился в стандартное хранилище, в которое операционная система и приложения могут быстро помещать (и быстро извлекать из него) данные конфигурации. Разработчики Windows 95 включили в систему программу regedit, стандартное средство для редактирования реестра на базе графического интерфейса, а в системе Windows NT был реализован другой графический редактор реестра — regedt32; он обеспечивал возможность работы с большим, чем regedit, числом типов реестра. В системах Windows NT 4.0 и Windows 2000 были реализованы оба редактора. В версии Windows XP разработчики Microsoft обновили программу regedit, которая стала совместимой с теми же типами данных, что и редактор regedt32. В результате последний вышел из употребления.

Regedit — чрезвычайно полезный инструмент, но средства поиска данных не относятся к числу самых выдающихся его возможностей. Функция поиска, показанная на экране 1, обеспечивает решение лишь самых необходимых задач. Пользователь нажимает комбинацию клавиш Ctrl+F, вводит текстовую строку, выставляет один или несколько из четырех предлагаемых флажков и нажимает кнопку Find Next. Нажимать клавишу F3 для повтора поиска быстро надоедает, если искомый элемент часто встречается в тексте.

 

Диалоговое окно поиска редактора regedit
Экран 1. Диалоговое окно поиска редактора regedit
Я решил расширить возможности поиска и написал сценарий Windows PowerShell, который назвал Search-Registry.ps1 (см. листинг 1). Он дает возможность осуществлять поиск данных в реестре с большей гибкостью, чем программа regedit. Сценарий Search-Registry.ps1 превосходит функцию поиска редактора regedit во многих отношениях:

— сценарий выполняет процедуры поиска с использованием регулярных выражений;

— он может осуществлять поиск на удаленных системах;

— он способен ограничивать число возвращаемых результатов поиска;

— на выходе сценария генерируются объекты, которые можно отфильтровывать, сортировать, экспортировать в файлы значений с разделителями-запятыми (файлы CSV) и т.д.

Многие читатели, хорошо знакомые со средой PowerShell, обратят внимание на то, что для организации доступа к реестру в PowerShell используются «ветви» реестра (например, HKLM). Однако важно отметить, что эти ветви функционируют только на локальном компьютере, но не на удаленных системах. Я рассматривал возможность дистанционной работы со средой PowerShell. Но для организации дистанционного взаимодействия необходимо, чтобы на всех удаленных системах был установлен и активирован пакет PowerShell 2.0, а это условие выполняется далеко не всегда.

Первое знакомство с файлом Search-Registry.ps1

В командной строке сценарий Search-Registry.ps1 использует следующий синтаксис:

Search-Registry [-StartKey]  [-Pattern]  [-MatchKey] [-MatchValue]
[-MatchData] [-MaximumMatches ] [-ComputerName ]
Параметр -StartKey указывает расположение раздела реестра, с которого следует начинать процедуру поиска. Указание этого параметра эквивалентно выбору ветви на левой панели редактора regedit, предшествующему нажатию комбинации клавиш Ctrl+F. В строке -StartKey используется формат

subtree:\key
где subtree — это либо сокращенное имя ветви в PowerShell, либо полное имя ветви, как оно представлено в regedit:

— HKCR или HKEY_CLASSES_ROOT
— HKCU или HKEY_CURRENT_USER
— HKLM или HKEY_LOCAL_MACHINE
— HKU или HKEY_USERS
Двоеточие (:) после имени ветви реестра можно опустить. Раздел задает каталог, с которого начинается поиск. Если вы опустите имя раздела или введете символ обратной косой черты (\), сценарий проведет поиск по всему пространству ветви реестра. Ниже приводятся три строки, которые при использовании с параметром -StartKey дают один и тот же результат:

HKLM\SOFTWARE
HKLM:\SOFTWARE
HKEY_LOCAL_MACHINE\SOFTWARE
По замыслу разработчиков параметр -StartKey при перечислении должен занимать первую позицию, так что если в командной строке аргумент этого параметра указывается первым, имя параметра можно опустить. Если же строка аргументов параметра -StartKey содержит пробелы, эту строку следует заключать в кавычки («).

Параметр -Pattern указывает шаблон регулярного выражения, которое вы хотите отыскать. Этот параметр должен указываться вторым, так что его имя можно опустить, если его аргумент в командной строке занимает второе место. Если строка аргумента параметра -Pattern содержит пробелы, используйте кавычки, как показано выше. Шаблон регулярного выражения нечувствителен к регистру символов. Для получения более подробной информации о создании шаблона регулярного выражения введите в окне командной строки PowerShell следующую команду:

help about_Regular_Expressions
Параметры -MatchKey, -MatchValue и -MatchData указывают на соответствия, которые должен отыскивать сценарий. Эти параметры соответствуют флажкам Keys, Values и Data в диалоговом окне Find редактора regedit, как показано на экране 1. Экран 2 иллюстрирует соответствие этих элементов элементам реестра. Я решил применять эти же имена и не переходить на новые (такие, как path, property, value), используемые средой PowerShell в провайдере реестра; мне нужно было, чтобы в сценарии применялись те же термины, что и в диалоговом окне Find утилиты regedit. Пользователь должен указать по меньшей мере один из трех названных параметров, но можно задавать и большее их число. Ключ -MatchKey выявляет соответствия в именах подразделов, ключ -MatchValue — в именах параметров реестра, а ключ -MatchData — в данных значений.

 

Соответствие элементов сценария элементам реестра
Экран 2. Соответствие элементов сценария элементам реестра
Ключ -MaximumMatches задает максимальное число результатов на один просканированный компьютер. По умолчанию его значение задается равным нулю, и в результате система возвращает максимальное число возможных соответствий. Данный параметр полезно задействовать при выполнении операций поиска в реестрах удаленных систем, это позволяет сводить к минимуму объем сетевого трафика.

Параметр -ComputerName предписывает выполнить поиск в реестре указанного компьютера или списка компьютеров. Можно задать имя одной системы или целый массив имен. Этот параметр предусматривает возможность конвейерного ввода данных. По умолчанию поиск выполняется в реестре локального компьютера.

Выходные данные сценария Search-Registry.ps1 представляют собой объекты, содержащие свойства, которые перечислены в таблице. На экране 3 представлен образец команды сценария Search-Registry.ps1 в окне консоли PowerShell. Сценарий, показанный на экране 3, направляет свои выходные данные команде Select-Object, которая отбирает только свойства Key, Value и Data (определять свойство ComputerName не требуется, поскольку операция поиска выполняется в реестре локальной системы). Далее Select-Object пересылает свои выходные данные команде Format-List. Список содержит только два совпадения в соответствии с заданным параметром -MaximumMatches.

 

Свойства выходных объектов сценария Search-Registry.ps1
 

Выполнение сценария Search-Registry.ps1
Экран 3. Выполнение сценария Search-Registry.ps1
В некоторых операционных системах отдельные каталоги реестра могут быть недоступными (к примеру, по причине недостаточности разрешений). Если сценарий Search-Registry.ps1 попытается обратиться к таким каталогам реестра, система выдаст сообщение об ошибке. Чтобы эти ошибки игнорировались, задайте в команде сценария ключ -Error-Action SilentlyContinue.
